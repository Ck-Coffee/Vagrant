1.java语言健壮性的支持：JVM中的异常处理机制
	Throwable：不正常情况
	    ①Error（错误）：人为不可控制
	    ②Exception（异常）：
	       a.必检异常：
		   b.运行时异常（免检异常）：RuntimeException
	注意：一个异常表现为一个对象，n个异常类表示n个异常情况
	
2.处理异常：终极处理，间接处理
	
	①终极处理：try{//检测与捕获异常
		        可能发生异常的代码
	        }catch(异常类型 变量){//捕获与处理异常
				处理异常的代码
			}
			
		注意：通过一个try，可以匹配多个catch块，从上往下异常类型要么平级，要么变大，不能缩小范围，
			  配对catch是从上往下依次执行
		
		finally--异常处理后保证了程序的正常结束，但是在此结束之前，必须执行的代码我们就要执行特殊处理
			格式：finally{异常处理完必须执行的代码}
		finalize(),final,finally三者之间的关系：finalize()是提醒JVM在空闲时间对当前的这个垃圾进行回收
												（但不是提醒后，立即回收垃圾）
		
		※return遇见finally，也得执行finally里面的代码。
	②间接处理：向上抛，不处理（自己不处理，交给调用者）
	throw：抛异常
	rhrows:声明异常
	注意：在使用时throw与throws,通常联合使用，但是可以分开使用。
3.自定义异常：根据程序具体情况自定义异常的一种方式
	创建自定义异常类型：继承Exception或者子类（重写其构造方法）