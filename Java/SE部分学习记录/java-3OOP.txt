面向过程：注重细节，强调过程

面向对象：注重结果，强调对象，由需求寻对象
    （找到解决问题的对象，让对象来处理这个问题）
分析：对象---每个对象的功能---对象之间的关系
创作：类---创建对象---通过对象之间的关系进行功能实现

	   分析                       分析
功能需求-------->解决问题最少的对象-------->每个对象在此功能中的角色及任务

对象：具有某种属性的能实现某种行为的事物。（属性 + 方法）
对象的作用：封装属性和方法

类：是对具有共同属性和方法的对象的一种总称。（对象的模板）
类的作用：作为一个模板“提供”对象。

两者之间的关系：先有对象后有类

1.类的定义语法：[访问权限修饰符][修饰符] class  类名{ 类体 }

2.类体：属性 方法 构造方法 块 内部类

3.构造方法：public 类名（参数列表）{属性初始化}
   构造方法的具体处理步骤：
   1.所有数据被初始化为默认值（0，false或true）
   2.按照类声明中出现的次序，依次执行所有域初始化语句和初始化块
   3.如果构造器第一行调用了第二个构造器，则执行第二个构造器的主体
   4.执行这个构造器的主体

  构造方法的注意：
    1.没有返回值
    2.没有修饰符
    3.名字与类名相同
    4.参数列表根据属性而定
    5.创建实例并且对其进行初始化（存在的意义）
    6.属于当前的类，只伴随new关键字出现
构造方法的重载：是为了程序员按照自己的意愿封装数据以及简化代码量提高代码复用，便于后期维护等优点。
    1.个数   2.顺序   3.类型

4.方法：public static void 方法名（）{}//静态方法也可以重载
    实例方法（无修饰符）：只能通过对象调用
    例：public void 方法名（）{}//实例方法
  方法注意：依靠实例而产生不同效果的方法就是实例方法。
  方法重载：发生在一个类里面的多态体现，

5.this：可以访问属性 ，可以访问方法，可以访问构造方法（this必须出现在构造方法中的第一行，
		此时this指代类，先有对象后有构造）
    例：this（）；

6.访问权限修饰符：
    1.private 		常修饰属性
    2.default		
    3.protected
    4.public  		常修饰方法

7.包：物理意义上的文件夹，将逻辑相关的类分组管理

  包的作用：理清各模块之间的关系，突出各模块的功能，便于后期管理，还控制不同包之间的访问权限
  *注意：
    1.不同包类之间访问需要导包（import），java.lang中的类是常用类，不用导包
    2.互导类必须是public修饰的-- import 包名.类名；
  包的命名：一般三级
      1.企业性质：例： com（商业）,org（非营利组织）,gov（政府机关）,edu（教育部门）
      2.工程名
      3.模块名

  类名 引用变量=new 构造方法；

8.静态：用static高级特性修饰符修饰，
  特点：static修饰过的元素属于当前的类，对其他成员也受影响，静态方法可以用类名调用，也可以用对象
  静态的可以访问静态的，不能访问非静态的；非静态的不但可以访问非静态的，还可以访问静态的

9.内部类：在一个类中再定义一个类，其称为内部类，与之对应的类成为外围类
	分类：普通，静态，局部，匿名
   普通内部类：可以访问外围类的任何成员（包括静态），不能存在static的元素
		其成员方法可以通过创建外围类对象，再由外围类对象创建内部类的对象，从而实现调用
		语法：外围类名.内部类名  对象名=new 外围类构造方法（）.new 内部类构造方法（）；
   静态内部类：可以访问外围的静态元素，也可以存在静态的元素
		语法：外围类名.内部类名 对象名=new 外围类名.内部类的构造方法；
   局部内部类：定义在外围类的一个方法中的类，此类可以访问外围类的静态属性及方法，只能访问所在方法的常量
   匿名内部类：以后补充
10.块：实例块，静态块

	实例块：{实例块体}
	实例块特点：在创建对象前需要做的事情，在访问构造方法前执行所有实例块（不调构造不执行实例块，每次构造前
	都需要执行所有实例块，按书写顺序执行）

	静态块：static{静态块体}
	静态块特点：当类一出现就会被加载且执行所有静态块，但是只执行一次，按书写顺序执行
	（区别于实例块的是：不需要构造都能执行）
	